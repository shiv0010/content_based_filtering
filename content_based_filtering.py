# -*- coding: utf-8 -*-
"""content_based_filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIjcDhgkl44nuLxp1ivgFA9Zkc7QLI90
"""

!pip install -q tensorflow-recommenders
!pip install -q --upgrade tensorflow-datasets
import os
import tempfile
import numpy as np
import pandas as pd
import tensorflow as tf
import tensorflow_datasets as tfds
import tensorflow_recommenders as tfrs
from sklearn.preprocessing import MultiLabelBinarizer

ratings=tfds.load('movielens/100k-ratings',split='train')
movies=tfds.load('movielens/100k-movies',split='train')

ratings_df = tfds.as_dataframe(ratings)
ratings_df.head(10)

ratings = ratings.map(lambda x: {
    "user_gender": x["user_gender"],
    "movie_genres": x["movie_genres"],
    "bucketized_user_age": x["bucketized_user_age"],
})
movies = movies.map(lambda x: x["movie_title"])

unique_movie_titles=np.unique(np.concatenate(list(movies.batch(1000))))
unique_user_gender=np.unique(list(ratings.map(lambda x: x["user_gender"])))
unique_bucketized_user_age=np.unique(list(ratings.map(lambda x: x["bucketized_user_age"])))
unique_user_occupation_label=np.unique(list(ratings.map(lambda x: x["user_occupation_label"])))

class UserModel(tf.keras.Model):
   
  def __init__(self):
    self.age_embedding = tf.keras.Sequential([
        tf.keras.layers.IntegerLookup(
            vocabulary=unique_bucketized_user_age, mask_token=None),
        tf.keras.layers.Embedding(len(unique_bucketized_user_age) + 1, 32),
    ])
 
    self.gender_embedding = tf.keras.Sequential([
        tf.keras.layers.IntegerLookup(
            vocabulary=unique_user_gender, mask_token=None),
        tf.keras.layers.Embedding(len(unique_user_gender) + 1, 32),
    ])

    self.mlb = MultiLabelBinarizer()
    self.t=self.mlb.fit(ratings_df['movie_genres'])
    self.movie_genre=tf.keras.Sequential([
        tf.keras.layers.Embedding(len(self.t) + 1, 32),
    ])

  def call(self, inputs):
    t_transformed=self.mlb.transform(inputs["movie_genres"])
    return tf.concat([
        self.age_embedding(inputs["bucketized_user_age"]),
        self.gender_embedding(inputs["user_gender"]),
        self.movie_genre(t_transformed),
    ], axis=1)

class QueryModel(tf.keras.Model):
 
  def __init__(self, layer_sizes):
    self.embedding_model = UserModel()
    self.dense_layers = tf.keras.Sequential()
    for layer_size in layer_sizes[:-1]:
      self.dense_layers.add(tf.keras.layers.Dense(layer_size, activation="relu"))
    self.dense_layers.add(tf.keras.layers.Dense(layer_sizes[-1]))

  def call(self, inputs):
    feature_embedding = self.embedding_model(inputs)
    return self.dense_layers(feature_embedding)

